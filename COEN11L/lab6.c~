/* Mods */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

/*

Phone Book 3.0:
Keeps a list of contacts in a data structure, from which contacts can be added, deleted, and displayed.


Commands:
1 -> Add a new record into the directory after entering the name, age, and status
2 -> Take a contact off of the directory after calling the name associated with the record
3 -> Show all known contacts
4 -> Close the program

Requirements:
- One global pointer variable to the head of the data structure (done)
- One data structure of struct nodes (a linked List) (done)
- Each node must have a name, a phone number, and a pointer that links to the next node (done)
- The data structure must be in alphabetical order
- No other global variables other than the ones already listed (done)
- Four functions: main, insert, delete, show 
- Absence of the function "duplicate" (Don't code for duplicate in the program) (done)
- Function other than main are declared before main and defined after main (done)
- The program works as intended

*/

/* CONTACT_NODE - represents a single contact */
struct CONTACT_NODE {
    char name[20];   // the name of person associated
    char phoneNumber[20];   // the phone number of person associated
    struct CONTACT_NODE *NEXT;   // the pointer to the next array
};

/* HEAD_CONTACT_NODE - represents the head of the contact data structure */
struct CONTACT_NODE *HEAD_CONTACT_NODE = NULL;

/* Functions List */
int insert(char newName[20], char newPhoneNumber[20]);
int delete(char oldName[20]);
void show();

/* MAIN */
int main() {
    
    /* Begins the program with an introduction and lists out all of the possible commands */
	char *openingMessage = "\n"
		"#===========================================#\n"
		"| PHONE BOOK 3.0 (NOW WITH DYANMIC SCALING) |\n"
		"#===========================================#\n"
		"1 -> Submit a new record to the directory\n"
		"2 -> Delete a person off the directory\n"
        "3 -> Show all known records recieved\n"
        "4 -> Quits the program\n\n";
    printf("%s", openingMessage);   // Print the 
    
    /* the title to the contact listing */
    char *contactListTitle = "\n"
    "#==================#\n"
	"| LIST OF CONTACTS |\n"
	"#==================#\n";
	
	/* Initialize Game values */
    srand((int) time (NULL));  // Set up the Scanner
    int callNumber; char phoneNumber[20], name[20];
    
    /* Start game loop */
	for (;;) {
	    
	    /* Get user input */
	    printf(">>> ");
	    scanf("%d", &callNumber);
	
	    /* parse input */
	    switch (callNumber) {
	        
	        /* '4' - quits program */
	        case 4:
	            printf("Thank you for using PHONE BOOK 3.0\n"); // goodbye message
	            return 0; // kills program
	        
	        /* '3' - displays all contacts in a table */
	        case 3:
	            printf("%s", contactListTitle);   // introduce the contact list page
	            show(); break;   // show the contacts and continue to next input
	            
	        /* '2' - delete a contact from the linked list */
	        case 2:
	            printf("Name (for Deletion): "); scanf("%s", name);
	            if (!delete(name)) {printf("***ERROR***: Name unfound in linked list; please check for typos.\n"); // Prevents segmentation fault
	            break;
	            
	        /* '1' - add a new contact node into the linked list */
	        case 1:
	            printf("Name: "); scanf("%s", name);   // Scan for name and phoneNumber
	            printf("Phone Number: "); scanf("%s", phoneNumber);
	            if (!insert(name, phoneNumber)) {printf("***ERROR***: Please do not use duplicate contacts.\n");} // Prevents duplicates
	            break;
	    
	        /* In all other cases, (ideally) do nothing */
	        default:
	            printf("***ERROR***: Invalid command. Please re-read instructions and check for typos.\n"); 
	            break;
	            
	        }
	    }
    }
}

/* show - displays the names and phone number of all contacts in a table */
void show() {
    
    /* set up variable to iterate through linked list */
    struct CONTACT_NODE *contact_node_i = HEAD_CONTACT_NODE;
    
    /* loop over the linked list, so... */
    /* while the current contact node in iteration exists... */
    while (contact_node_i != NULL) {   
        
        /* print the name and the phone number associated with said contact */
        printf("%s : %s\n", contact_node_i->name, contact_node_i->phoneNumber);
        
        /* then, set contact_node_i to the next contact node in iteration */
        contact_node_i = contact_node_i->NEXT;

    } printf("\n"); return;
    
}

/* insert - given the name and phone number, creates a new contact, checks for duplicates, and 
            then inserts a new contact into the correct alphabetical position */
int insert(char newName[20], char newPhoneNumber[20]) {
    
    /* set up variables to iterate through linked list */
    struct CONTACT_NODE *contact_node_i = HEAD_CONTACT_NODE; 
    struct CONTACT_NODE *prev_contact_node_i = NULL;
    
    /* define new structure to represent the new contact */
    struct CONTACT_NODE *newContact;
    newContact = (struct CONTACT_NODE*) malloc(sizeof(struct CONTACT_NODE));
    strcpy(newContact->name, newName);
    strcpy(newContact->phoneNumber, newPhoneNumber);

    /* if HEAD_CONTACT_NODE doesn't exist, then assign the new contact to it, and assign the next contact to NULL */
    if (HEAD_CONTACT_NODE == NULL) {
        newContact->NEXT = NULL;
        HEAD_CONTACT_NODE = newContact;
        return 1;   // exit function with no error
    }

    // Used for a later for loop to avoid segmentation fault
    int smallerNameLength, ishead=1, abcVS;

    /* Otherwise, loop over linked list (to find proper "next" value) */
    /* while the current contact node in iteration */
    while (contact_node_i != NULL) {
        
        /* Evaluate in case of duplicate; if duplicate is found, return error */
        /* Otherwise, check alphabtical placement using strcmp (as suggested by TAs) */
        if (strcmp(newContact->name, contact_node_i->name)==0) return 0;
        if (strcmp(newContact->name, contact_node_i->name)<0) abcVS = 0;
        if (strcmp(newContact->name, contact_node_i->name)>0) abcVS = 1;
        
        
        /* if abcVS = 0 and the iterator is currently on the head, reset the head */
        if (abcVS == 0 && ishead) {
            newContact->NEXT = contact_node_i;
            HEAD_CONTACT_NODE = newContact;
            return 1;
        }
        
        /* if abcVS = 1, */
        else if (abcVS == 1) {
            /* if on head node, just link the head to the new node as the second one */
            if (ishead) {
                if (contact_node_i->NEXT != NULL && strcmp(newContact->name, contact_node_i->NEXT->name)>0){
                    prev_contact_node_i = contact_node_i;
                    contact_node_i = contact_node_i->NEXT;
                    ishead = 0;                     
                     continue;
                } // (abuse short circuit here)
                   
                else {
                    newContact->NEXT = contact_node_i->NEXT;
                    contact_node_i->NEXT = newContact;
                    return 1;
                }
            }
            /* if abc = 1 and on tail, simply attatch newContact to the end of the list */
            if (contact_node_i->NEXT == NULL) {
                contact_node_i->NEXT = newContact;
                newContact->NEXT = NULL;
                return 1;
            }
            /* if not isHead, the contact belongs in the place BEHIND that node */
            /* thus, link the previous node to the new one, and link the new one to the iterated */
            prev_contact_node_i->NEXT = newContact;
            newContact->NEXT = contact_node_i;
            return 1;
        }
        
        /* In other cases, simply move on to the next linked list */
        prev_contact_node_i = contact_node_i;
        contact_node_i = contact_node_i->NEXT;
        ishead = 0;
        
    }
}

/* delete - given the name, checks to see if the contact associated with the name exists, 
            frees a contact node , and links adjacent values*/
int delete(char oldName[20]) {
    
    /* set up variable to iterate through linked list */
    struct CONTACT_NODE *contact_node_i = HEAD_CONTACT_NODE, *prev_contact_node_i = NULL;
    
    /* Check the head first */
    if (contact_node_i != NULL && strcmp(oldName, contact_node_i->name)==0) { // again, abuse short circuit
        HEAD_CONTACT_NODE = contact_node_i->NEXT;  // makes the next node the new head
        free(contact_node_i);   // frees the original head
        return 1;
    }
    
    /* Otherwise, loop over linked list (to find the name rigged for deletion) */
    while (contact_node_i != NULL) {
        
        /* Checks to see if the current node has the given name set for deletion */
        if (strcmp(oldName, contact_node_i->name)==0) {
            // Check to see if it is a tail node
            if (contact_node_i->NEXT == NULL) {
                prev_contact_node_i->NEXT = NULL;  // make the second-last the new tail
                free(contact_node_i);   // free the tail
                return 1;
            }
            // otherwise, just free the given node, and conjoin the adjacent nodes
            prev_contact_node_i->NEXT = contact_node_i->NEXT;
            free(contact_node_i); 
            return 1;
        }
        
        /* In other cases, simply move on to the next linked list */
        prev_contact_node_i = contact_node_i;
        contact_node_i = contact_node_i->NEXT;
        
    } return 0;
}
   





